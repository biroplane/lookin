<!DOCTYPE html>
<html>

<head>

  <script data-pace-options='{ "ajax": false }' src="/js/pace.min.js"></script>

  <meta charset="UTF-8">
  <title></title>

  <link rel="stylesheet" href="/css/_bootstrap.css">

  <!-- <link rel="stylesheet" href="./css/bootstrap-table.min.css"> -->



  <link rel="stylesheet" href="/css/pace.css">
  <link rel="stylesheet" href="/css/datatables.min.css" />
  <link rel="stylesheet" href="/css/jquery-ui.min.css">
  <!-- <link rel="stylesheet" href="./css/jquery-ui.structure.min.css"> -->
  <link rel="stylesheet" href="/css/bootstrap-select.min.css"/>
  <link rel="stylesheet" href="/css/datatables.min.css" />
  <link rel="stylesheet" href="/css/datepicker.min.css">
  <link rel="stylesheet" href="/css/summernote.css" />
  <link rel="stylesheet" href="/css/style.css" />
  <script>
    // var filters={};
    // const {ipcRenderer}=require('electron')
    // ipcRenderer.send('sendFilter','filtri');
    // ipcRenderer.on('getFilter',(evt, arg)=>{
    //   filters=arg;
    // })
  </script>
  <script>
    //window.nodeRequire = require;
    delete window.require;
    delete window.exports;
    delete window.module;
  </script>

  <script src="/js/jquery-3.1.1.min.js"></script>
  <script src="/js/bootstrap.min.js"></script>
  <script src="/js/datatables.min.js"></script>
  <script src="/js/dataTables.bootstrap.min.js"></script>
  <script src="/js/jquery-ui.min.js"></script>
  <script src="/js/dataTables.buttons.min.js"></script>
  <script src="/js/buttons.html5.min.js"></script>
  <script src="/js/bootstrap-select.min.js"></script>
  <script src="/js/bootstrap-editable.js"></script>
  <script src="/js/jszip.min.js"></script>
  <script src="/js/moment.js"></script>
  <script src="/js/datepicker.min.js"></script>
  <script src="/js/datepicker.en.js"></script>
  <!-- <script src="/js/daterangepicker.js"></script> -->
  <script src="/js/dtplugins.js"></script>
  <script src="/js/filterByText.js"></script>

  <script src="/js/summernote.min.js"></script>
</head>

<body>
  <div class="container-fluid">


    <!--
┌──────────────────────────────────────┐
│ ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ │
│        ┌──────────────────┐          │
│ ░░░░░░ │      TABLE       │ ░░░░░░░░ │
│        └──────────────────┘          │
│ ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ │
└──────────────────────────────────────┘
-->
    <h4 style="padding-top:-140px" class="maintitle">



</h4>
    <table id="dataTable" class="table display dataTable stripe nowrap" cellspacing="20" width="100%">
      <!-- <thead><tr><th></th></tr></thead>
    <tbody><tr><td></td></tr></tbody>
    <tfoot><tr><th></th></tr></tfoot> -->

    </table>

  </div>
  <!-- Modal -->
  <div class="modal fade" id="chatModal" class="chatModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title" id="myModalLabel">Modal title</h4>
        </div>
        <div class="modal-body">
          <form action="#">
            <div class="container-fluid">
              <div class="form-group ">

                <div class="input-group margin-bottom-sm col-xs-7">

                  <input class="form-control" type="text" placeholder="search">
                  <span class="input-group-addon"><i class="fa fa-search fa-fw"></i></span>
                </div>
                <div class="input-group input-daterange margin-bottom-sm col-xs-5"><input type="text" name="daterange" class="form-control" data-language="en" data-date-format="yyyy-mm-dd" data-min-view="days" data-range="false" value=""></div>
              </div>
            </div>
            <div class="container-fluid">
              <div class="form-group ">
                <label for="elencomessaggi"><i class="fa fa-file-text-o" aria-hidden="true"></i> Read Notes</label>
                <div id="elencomessaggi">HELLO</div>
              </div>
            </div>
            <div class="container-fluid">
              <div class="form-group">
                <label for="textmessage"><i class="fa fa-paper-plane" aria-hidden="true"></i> Send Note</label><br />
                <div id="textmessage"></div>

              </div>
            </div>

          </form>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary">Save changes</button>
        </div>
      </div>
    </div>
  </div>
  <!-- END MODAL -->
</body>
<script>
  var mainTable;
  var t;
  var partials = new Array();
  var data = {};
  var viewname;
  var datepicker;
  //console.log(<%- report.data %>);
  // alldata=<%- JSON.parse(JSON.stringify(report,null,2)) %>;
  columnsData = <%- JSON.parse(JSON.stringify(report.data,null,2)) %>;
  //console.log(<%- JSON.parse(JSON.stringify(report.data)) %>);
  columnsData = columnsData[0];
  columns = columnsData.views[0].columns;
  viewname="<%=report.viewname%>";
  console.log("COLS ", columnsData);


  newcol = [];

  var selectMyRows;
  //console.log("LUNGHEZZA K ", columns.length);
  $.each(columns, function(key, val) {
    cname = '';

    switch (val.type) {
      case 'STRING':
      case 'TEXT':
      case 'FILTER':
      case 'VARCHAR':
        cname = 'text-left';
        break;
      case 'NOTE':
        cname= 'text-left notefield';
        break
      case 'DATE':
      case 'DATA':
        cname = 'text-center';
        break;
      default:
        cname = 'text-right';
    }
    //console.log("COLONNE K ", key, val,cname);
    newcol.push({
      data: val.nome.toString(),
      name: val.nome.toString(),
      title: val.nome.toString().split("_").join(" "),
      type: val.type,
      /*(val.TYPE != '') ? val.TYPE : "string",*/
      render: columnRender(val),
      className: cname
    });
    //newcol.push({"data":v.toString(),type:"text"});
    //console.log("TIPO DATO COLONNA ",newcol[key].type);
  })
  //console.log(" COLONNE ", columns.length, " NEW COL ",newcol);
  data.columns = newcol;

  $().ready(function() {
    $("#textmessage").summernote({
      height: 150, // set editor height
      minHeight: 120, // set minimum height of editor
      maxHeight: 600, // set maximum height of editor
      focus: true, // set focus to editable area after initializing summernote
      toolbar: [
        // [groupName, [list of button]]
        ['style', ['bold', 'italic', 'underline', 'clear']],
        ['fontsize', ['fontsize']],
        ['para', ['ul', 'ol', 'paragraph']]
      ]
    });
    $(document).on('click','.message',function (e) {
      //e.preventDefault();

      var id=$(this).data(id);
      console.log("CLICK",id.reference);
      updateModal(id);
      $('.modal-body #elencomessaggi').html("<h2>MESSAGGIO: "+id.id+"</h2>")
    })
    /*-------------------*/
    $("footer").slideUp();

    $(document).on('show.bs.modal','#chatModal',function (e) {
      console.log("MOSTRO LA FINESTRA", e);
      // datepicker = $('input[name="daterange"]').datepicker({
      //   language: "en",
      //   minView: 'day',
      //   dateFormat: "YYYY-MM-DD",
      //   view: 'day',
      //   range: true,
      //   maxDate: new Date(),
      //   position: "top left"
      // }).data('datepicker')
    })



    //TITOLO
    currentview = viewname;
    // tit = '';//viewname.toString().toLowerCase().split("_") ||  viewname;
    // stor = ($.inArray('stor', tit) >= 0) ? ' storico' : '';
    // //ddate=(datalog==true)?' from <i>'+moment(datalog).format("DD MMM YYYY")+"</i>" :'';
    // var qs = '';
    // if (querystring != '' && querystring != null && querystring.length > 0) {
    //   qs += '<h4>FILTERED BY ';
    //   for (var q in querystring) {
    //     if (querystring[q] != "" && querystring[q] != '_') {
    //       qs += q + ' - ' + querystring[q] + " ";
    //     }
    //   }
    //   qs += '</h4>';
    // }
    // $('.maintitle').html("Displaying: <b>" + tit[2] + stor + "</b> report, Grouped by <b>" + tit[(tit.length - 1)] + "</b><br />" + qs /*+ddate*/ )


    var tablefooter = '';
    partialfooter = '<tr class="partial">';
    totalfooter = '<tr class="total">';
    //tablefooter =totalfooter;
    $(data.columns).each(function(i) {
      partialfooter += "<th></th>";
      totalfooter += "<th></th>";
    });

    partialfooter += "</tr>";
    totalfooter += '</tr>';
    tablefooter = '' + totalfooter + partialfooter + '';

    //console.log("VIEW DA CHIAMARE ",viewname);
    // gf = '';
    // for (var f in querystring) {
    //   if (querystring[f] != null && querystring[f] != '') {
    //     gf += f + '=' + querystring[f] + '&';
    //
    //   }
    // }
    mainTable = $('#dataTable').DataTable({


      //data:'http://localhost:3000/view/'+currentview+'?'+gf,
      columns: data.columns,
      initComplete: function() {
        $(".dataTable thead").first().each(function(i) {
          //console.log("THIS" + $(this));
          //$('<tr class="combos"></tr>').prependTo($(this));
          $('<tr class="bigheader"></tr>').appendTo($(this));

          $(this).find('th').each(function(j) {
            var optstr = '<th>';
            if (columns[j].operations != null) {
              optstr += '<select class="operation">';
              //console.log("OPERAZIONI FATTIBILI",columns[j].operations);
              $(columns[j].operations).each(function(n) {
                //def=(this.default==1)?' selected':'';
                optstr += '<option value="' + this.value.toLowerCase() + '">' + this.nome + '</option>';
              })
              optstr += '</select>';

            }
            optstr += '</th>';
            //$(optstr).appendTo($('.combos'));
            $('<th><input type="text" class="columnfilter"/></th>').appendTo($('.bigheader'));

          })
          $(tablefooter).appendTo($(this));
          //console.info($('.dataTable>tbody.ui-selectable').html())
          sumSameColumnValues($.parseHTML($('.dataTable>tbody.ui-selectable').html()))
          // sv=mainTable.column('SALES_VAL:name').index()
          // svl=mainTable.column('SALES_VAL_L:name').index()
          //
          // sm=mainTable.column('SALES_MARK:name').index()
          // sml=mainTable.column('SALES_MARK_L:name').index()
          //
          // vr=mainTable.column('VALR:name').index()
          // pr=mainTable.column('PROF:name').index();
          // mk=mainTable.column('MARK:name').index();
          // mkl=mainTable.column('MARK_L:name').index();
          //
          //
          // tv1=parseFloat($('tr.partial th').eq(svl).text().split(".").join(''));
          // tv2=parseFloat($('tr.partial th').eq(sv).text().split(".").join(''));
          //
          // tp1=parseFloat($('tr.partial th').eq(sml).text().split(".").join(''))
          // tp2=parseFloat($('tr.partial th').eq(sm).text().split(".").join(''))
          //
          // ttmk=thousandsSeparator(formatNumber(columns[mk].type,(((tv2/(tv2-tp2))-1)*100)))
          // $('tr.partial th').eq(mk).empty().html(ttmk)
          //
          // ttmkl=thousandsSeparator(formatNumber(columns[mkl].type,(((tv1/(tv1-tp1))-1)*100)))
          // $('tr.partial th').eq(mkl).empty().html(ttmkl)
          //
          // ttvr=thousandsSeparator(formatNumber(columns[vr].type,(1-(tv1/tv2))*100));
          // $('tr.partial th').eq(vr).empty().html(ttvr)
          //
          // ttpr=thousandsSeparator(formatNumber(columns[pr].type,(1-(tp1/tp2))*100));
          // $('tr.partial th').eq(pr).empty().html(ttpr)
          //$('.selectpicker').selectpicker("refresh");

          //console.log("INIT COMPLETE");
        })
        this.api().columns().every(function() {
          idx = this.index();
          //if (columns[this.index()].type != "INTEGER" && columns[this.index()].type != "FLOAT") {
          if (columns[this.index()].type == "FILTER" || columns[this.index()].type == "DATE" || columns[this.index()].type == "WEEK" || columns[this.index()].type == "MONTH" || columns[this.index()].type == "YEAR") {

            var column = this;
            //console.log("SELECT BOX IN HEADER", $('.partial th').eq(idx));
            name = columns[idx].nome;
            id = name;
            var select = $('<select class="selectpicker unique show-tick" multiple title="' + '' +
                '"  data-actions-box="true" data-live-search="true" name="' + name + '" id="' + name + '"><option data-hidden="true"></option></select>')
              .appendTo($('.partial th').eq(idx).empty())
              .on('change', function(e) {
                e.preventDefault();
                //console.log("CERCA ", $(this).val());
                var sv = $(this).val()
                val = '';
                for (var s in sv) {

                  val += $.fn.dataTable.util.escapeRegex(sv[s]) + "|";

                }
                val = val.substring(0, val.length - 1)
                //console.log("CERCO ", val);
                // var val = $.fn.dataTable.util.escapeRegex(
                //   $(this).val()
                // );
                //
                column
                  .search(val, true, false)
                  .draw();

              });
            if (columns[idx].type == "DATE") {
              column.data().unique().sort().reverse().each(function(d, j) {
                d = moment(d).format("YY-MM-DD");
                select.append('<option value="' + d + '">' + d + '</option>')
              });
            } else {
              column.data().unique().sort().reverse().each(function(d, j) {
                select.append('<option value="' + d + '">' + d + '</option>')
              });
            }

          }
        });
        $('.selectpicker').selectpicker("refresh")
        // var footer = $(this).append('<tfoot><tr class="partial"></tr><tr class="total"></tr></tfoot>');
        // this.api().columns().every(function() {
        //   var column = this;
        //   $(footer).find('.partial').append('<th></th>');
        //   $(footer).find('.total').append('<th></th>');
        // });



        //HEADER CALLBACK
        var api = this.api();
        //console.log("HEADER CALLBACK ");
        api.columns({
          filter: 'applied'
        }).every(function() {
          ind = this.index();
          if (columns[ind].operations != null) {
            //console.log("INDEX ",this.index());
            for (var o in columns[ind].operations) {
              if (columns[ind].operations[o].default == 1) {
                op = columns[ind].operations[o].value.toLowerCase();
              }
            }

            //var sum = operation(op, this.data())
            //console.log("OPERAZIONE VALCHIRIA", sum, op);
            //console.log("ROW "+row+" - SOMMA "+sum); //alert(sum);
            //sum = (isNaN(sum)) ? '' : sum;
            //$('tfoot .total th').html(sum);
            //console.log("THIS ",this.nodes().parentNode,this.index());
            // if (op != 'sumby' || sum>0) {
            //   sum = (isNaN(sum)) ? '' : formatCurrency(parseFloat(sum));
            //   //console.log("LOG ",this.index(), columns[this.index()].type);
            //   //if(columns[this.index()].type == 'FLOAT' || columns[this.index()].type == 'INTEGER'){
            //   sum = formatNumber(columns[this.index()].type, sum)
            //   sum = thousandsSeparator(sum)
            // }
            // $('.dataTable tr.partial').find('th').eq(this.index()).empty().html(sum)
            //}
          }

        });
        //oneColumnOp(null, -1)
        $('#dataTable').DataTable().columns.adjust().draw()
      },

      headerCallback: function(row, data, start, end, display) {

        //console.log("ROW ",api.column().eq(this.index()));
      },
      // footerCallback:function () {
      //   $('#dataTable').DataTable().columns.adjust().draw()
      // },
      drawCallback: function() {
        var api = this.api();
        var rows = api.rows({page: 'current'}).nodes();
        var last = null;
        var colonne = api.rows(0).data().length;
        var totale = new Array();
        totale['Totale'] = new Array();
        var groupid = -1;
        var subtotale = new Array();
        var idx = api.column('CUSTOMER:name').index();

        api.column(idx, {
          page: 'current'
        }).data().each(function(group, i) {
          if (last !== group) {
            groupid++;
            $(rows).eq(i).before(
              '<tr class="group"><td colspan="3">&nbsp;</td><td colspan="5">' + group + '</td></tr>'
            );
            last = group;
          }


          val = api.row(api.row($(rows).eq(i)).index()).data(); //current order index
          $.each(val, function(index2, val2) {
            if (typeof subtotale[groupid] == 'undefined') {
              subtotale[groupid] = new Array();
            }
            if (typeof subtotale[groupid][index2] == 'undefined') {
              subtotale[groupid][index2] = 0;
            }
            if (typeof totale['Totale'][index2] == 'undefined') {
              totale['Totale'][index2] = 0;
            }

            valore =val2;// Number(val2.replace('€', "").replace('.', "").replace(',', "."));
            subtotale[groupid][index2] += valore;
            totale['Totale'][index2] += valore;
          });



        });
        $('tbody').find('.group').each(function(i, v) {
          var rowCount = $(this).nextUntil('.group').length;
          $(this).find('td:eq(1)').append($('<span />', {
            'class': 'rowCount-grid'
          }).append($('<b />', {
            'text': ' (' + rowCount + ')'
          })));
          var subtd = '';
          for (var a = 8; a < colonne; a++) {
            subtd += '<td>AAA' + subtotale[i][a] + ' OUT OF ' + totale['Totale'][a] + ' (' + Math.round(subtotale[i][a] * 100 / totale['Totale'][a], 2) + '%) ' + '</td>';
          }

          $(this).append(subtd);
          console.log("SUBTD ",$(this),subtd);
        });

      },
      // columnDefs: [{
      //   "visible": true,
      //   "targets": 0
      //   //"visible":false, "targets":2
      // }],
      //  ajax: {
      //    url:'http://localhost:3000/view/'+currentview+'?'+gf
      //   //  ,type: 'GET'
      //  },

      //dataSrc:data[0],
      // renderer: "bootstrap",
      aaSorting: [],
      deferRender: true,
      serverSide: false,
      processing: true,
      sortable: false,
      stateSave: false,
      select: false,
      paging: true,
      displayLength: 25,
      scrollX: false,
      // scrollY:800,

      fixedHeader: false,
      // sScrollX:"20%",
      // sScrollXInner:"99.9%",
      // bScrollCollapse: false,
      scrollCollapse: false,

      //buttons: true,
      ajax: {
        type: 'GET',
        url: 'http://localhost:3000/analitycs/'+currentview,
        dataType: 'json',

      },

      autoWidth: false,
      buttons: [
          'copyHtml5', {
            extend: 'excelHtml5',
            filename: viewname + moment().format("YYYYMMDD-HH-MM"),
            exportOptions: {
              orthogonal: 'export'
            }
          }, {
            extend: 'csvHtml5',
            filename: viewname,
            exportOptions: {
              orthogonal: 'export'
            }
          }, {
            extend: 'pdfHtml5',
            filename: viewname,
            exportOptions: {
              orthogonal: 'export'
            }
          }, 'print', 'colvis'
        ]
        //,"dom": 'ZBlifrtpB'
        ,
      "dom": "<'row'<'col-sm-12'B>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'Bl><'col-sm-7'p>>",
      "lengthMenu": [
        [10, 25, 50, 100, 200, -1],
        [10, 25, 50, 100, 200, "All"]
      ],
      "language": {
        "decimal": ",",
        "thousands": ".",
        "zeroRecords": "No records found, sorry"
      },
      "stripeClasses": ['oddo', 'eveno'],
      rowCallback: function(row, rdata, index) {
        //console.log("ROW: ", row, " DATA: ", rdata, " INDEX: ", index)
        $(row).find("td").each(function(a) {
          if (parseFloat($(this).text()) > 0) {
            //$('td:eq(' + a + ')', row).addClass('pos');
          } else if (parseFloat($(this).text()) < 0) {
            $('td:eq(' + a + ')', row).addClass('neg');
          }
        })
      }
    });
    // END DATATATABLE
    $('#dataTable').DataTable().columns.adjust().draw();

    // $('table').on('change', 'select.operation', function() {
    //   //performOperationOnColumn(this);
    //   var group = ($('table tbody tr').hasClass('ui-selected')) ? $('table tr.ui-selected') : null;
    //  //console.log("GUPOOOOOOO", group);
    //   oneColumnOp(group, $(this).parent().prevAll().length, group.index())
    //   //console.log(" GLOBAL INDEX ",$(this).parent().prevAll().length);
    // });
    // footer = '<tfoot><tr>';
    // $(data.columns).each(function(i) {
    //   footer += "<th></th>";
    // })
    // footer += '</tr></tfoot>';
    // $("#dataTable").append(footer);
    //new $.fn.dataTable.FixedHeader( mainTable );


    // $(".dataTable thead").first().each(function(i) {
    //   //console.log("THIS" + $(this));
    //   $('<tr class="combos"></tr>').prependTo($(this));
    //   $('<tr class="bigheader"></tr>').appendTo($(this));
    //
    //   $(this).find('th').each(function(i) {
    //     $('<th><select class="selectpicker operation"><option value="avg">AVG</option><option value="sum" selected>SUM</option><option value="min" >MIN</option><option value="max" >MAX</option></select></th>').appendTo($('.combos'));
    //     $('<th><input type="text" class="columnfilter"/></th>').appendTo($('.bigheader'));
    //
    //   })
    //   $(tablefooter).appendTo($(this));
    // })

    $(".dataTable thead").on('keyup search input paste cut', 'input.columnfilter', function(e) {
      //console.log("CERCAAAAAAAAA", $(this).parent().index(), "VAL ", $(this).val());
      $('#dataTable').DataTable().column($(this).parent().index() + ':visible').search($(this).val()).draw();
    });
    $('#dataTable').on('length.dt', function(e, settings, len) {
      //console.log("CAMBIO LUNGHEZZA ",e,settings,len);
      sumbyAll();
    })
    $('.dataTable').on('shown.bs.select', 'select.selectpicker', function(e) {
      var idx = $(this).parent().parent().index()
      var txtfld = $('.dataTable thead th input.columnfilter').eq(idx).val()
      //console.log("ECCO IL DROPDOWN",txtfld,idx);

      $(this).parent().find('.bs-searchbox input[type=text]').val(txtfld)
      $(this).selectpicker('refresh')

      //$(this).parent().parent().selectpicker("refresh")
    })
    $('#dataTable').on('column-visibility.dt', function(e, settings, column, state) {
      e.preventDefault();
      //console.log('Column ' + column + ' has changed to ' + (state ? 'visible' : 'hidden'), $("#dataTable thead th").eq(column));
      //$("#dataTable thead tr:nth-child(2) th").eq(column).toggle(state)
      //state=!state;
      $('.dataTable thead tr.partial th').eq(column).toggle(state);
      $('.dataTable thead tr.total th').eq(column).toggle(state);
      // $('.dataTable thead tr.combos th').eq(column).toggle(state);
      // $('.dataTable thead tr:nth-child(2) th').eq(column).toggle(state);
      $('.dataTable thead tr.bigheader th').eq(column).toggle(state);
    });
    $("#dataTable").addClass("selezionabile");
    var prev = -1;
    // selectMyRows = $(".selezionabile>tbody").selectable({
    //   filter: "tr:not(.group)",
    //   cancel:"td.note",
    //
    //   selecting: function(e, ui) {
    //     var curr = $(ui.selecting.tagName, e.target).index(ui.selecting);
    //     if (e.shiftKey && prev > -1) {
    //       //console.log(prev, curr, Math.min(prev,curr));
    //       $(ui.selecting.tagName, e.target).slice(Math.min(prev, curr), 1 + Math.max(prev, curr)).addClass('ui-selected')
    //       prev = -1;
    //     } else {
    //       prev = curr;
    //     }
    //     //console.log("CAMBIO SELEZIONE SU SELECTING");
    //   },
    //   selected: function(event, ui) {
    //     //console.log("EVENT ", event," UI ",ui);
    //     //$('tr.ui-selected').first().clone().appendTo('.content');
    //     //$("footer").slideDown('slow');
    //     //$('.content td').first().html("EVENT "+ event+" UI "+ui)
    //     //console.log("CAMBIO SELEZIONE SU SELECTED");
    //
    //   },
    //   start: function(event, ui) {
    //
    //     $(event.target).toggleClass('ui-selected');
    //     //$(".content").empty();
    //     //$('table tbody tr').first().clone().appendTo('.content');
    //
    //   },
    //   stop: function(event, ui) {
    //
    //     oneColumnOp($('#dataTable tr.ui-selected'), -1)
    //     //console.log("POSSO DARTI QUESTO",this);
    //     sumSameColumnValues(this)
    //     //sumbyAll();
    //     sumAllColum(10);
    //
    //   }
    //
    // });
    //});
    // $('#dataTable').DataTable({
    //   data:data.data,
    //   columns:data.columns,
    //   "bSort":false
    // })
    //})

  });

  function sumAllColum(limit) {
    var columnCount = mainTable.settings().columns()[0].length;
    var firstColumn = mainTable.column(0).data().length;
    //console.log("COLUMN COUNT",columnCount,firstColumn);
  }

  function sumbyAll() {
    //console.log("CHIAMATA FUNZIONE");

    sv = mainTable.column('SALES_VAL:name').index()
    svl = mainTable.column('SALES_VAL_L:name').index()

    sm = mainTable.column('SALES_MARK:name').index()
    sml = mainTable.column('SALES_MARK_L:name').index()

    vr = mainTable.column('VALR:name').index()
    pr = mainTable.column('PROF:name').index();
    mk = mainTable.column('MARK:name').index();
    mkl = mainTable.column('MARK_L:name').index();

    v1 = parseFloat($('tr.total th').eq(svl).text().split(".").join(''));
    v2 = parseFloat($('tr.total th').eq(sv).text().split(".").join(''));

    p1 = parseFloat($('tr.total th').eq(sml).text().split(".").join(''))
    p2 = parseFloat($('tr.total th').eq(sm).text().split(".").join(''))

    tvr = ((v2 / v1) - 1) * 100;
    tvr = formatNumber(columns[vr].type, tvr)
    tvr = thousandsSeparator(tvr)
    $('tr.total th').eq(vr).empty().html(tvr)


    tpr = ((p2 / p1) - 1) * 100;
    tpr = formatNumber(columns[pr].type, tpr)
    tpr = thousandsSeparator(tpr)
    $('tr.total th').eq(pr).empty().html(tpr)

    tmk = ((v2 / (v2 - p2)) - 1) * 100
    tmk = formatNumber(columns[mk].type, tmk)
    tmk = thousandsSeparator(tmk)
    $('tr.total th').eq(mk).empty().html(tmk)

    tmkl = ((v1 / (v1 - p1)) - 1) * 100
    tmkl = formatNumber(columns[mkl].type, tmkl)
    tmkl = thousandsSeparator(tmkl)
    $('tr.total th').eq(mkl).empty().html(tmkl)

    // TOTALI
    tv1 = parseFloat($('tr.partial th').eq(svl).text().split(".").join(''));
    tv2 = parseFloat($('tr.partial th').eq(sv).text().split(".").join(''));

    tp1 = parseFloat($('tr.partial th').eq(sml).text().split(".").join(''))
    tp2 = parseFloat($('tr.partial th').eq(sm).text().split(".").join(''))

    ttmk = thousandsSeparator(formatNumber(columns[mk].type, (((tv2 / (tv2 - tp2)) - 1) * 100)))
    $('tr.partial th').eq(mk).empty().html(ttmk)

    ttmkl = thousandsSeparator(formatNumber(columns[mkl].type, (((tv1 / (tv1 - tp1)) - 1) * 100)))
    $('tr.partial th').eq(mkl).empty().html(ttmkl)

    ttvr = thousandsSeparator(formatNumber(columns[vr].type, (1 - (tv1 / tv2)) * 100));
    $('tr.partial th').eq(vr).empty().html(ttvr)

    ttpr = thousandsSeparator(formatNumber(columns[pr].type, (1 - (tp1 / tp2)) * 100));
    $('tr.partial th').eq(pr).empty().html(ttpr)

    //console.log(tmkl,tv1,tv2,tp1,tp2,ttmk,ttmkl,ttvr,ttpr);
    //console.log("TV2 ",$('tr.partial th').eq(sv));
  }

  function stopPropagation(evt) {
    if (evt.stopPropagation !== undefined) {
      evt.stopPropagation();
    } else {
      evt.cancelBubble = true;
    }
  }

  function formatCurrency(total, type, row) {
    var neg = false;
    if (total < 0) {
      neg = true;
      total = Math.abs(total);
    }
    //console.log("FORMAT CURRENCY", parseFloat(total, 10).toFixed(2).replace(/(d)(?=(d{3})+.)/g, "$1.").toString());
    return (neg ? "-" : '') + parseFloat(total, 10).toString().replace(/(d)(?=(d{3})+.)/g, "$1.").toString();
  }

  function thousandsSeparator(x) {
    //
    x = x.toString().split('.').join(',');
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");

  }

  function sumSameColumnValues(righe) {
    //console.log("HELLOG!!! ",righe);
    //console.info(typeof(righe))
    var selected = $(righe).find('.ui-selected')

    var first = selected.first().find('td').first().text();

    //console.log("FIRST",first);
    operationsArray = new Array();
    //trArray=new Array($(tr).children('td').length);
    $(righe).find('tr').each(function(i, tr) {
      $(tr).find('td').each(function(j, td) {
        if ($(tr).find('td').eq(0).text() == first) {

          //console.log("CALCOLO ",j," I ",i,$(this).text());
          if (!operationsArray[j]) {
            operationsArray[j] = []
          }
          if (columns[j].type == 'INTEGER' || columns[j].type == 'FLOAT') {
            h = $(td).text().split(".").join('');
            h = h.split(",").join('');
            if (columns[j].type == 'FLOAT') {
              h = parseFloat(h) / 100;
            }
            if (columns[j].type == 'INTEGER') {
              h = parseInt(h);
            }

            operationsArray[j][i] = h;
          }
        }

      });
      //operationsArray[j]=[]
    });
    //console.log("ECCO L'ARRAY DEFINITIVO ",operationsArray);
    $(operationsArray).each(function(e) {
      // //console.log("OPERA", e);
      if (columns[e].type == 'INTEGER' || columns[e].type == 'FLOAT') {
        if (columns[e].operations != null) {
          var sum = operation(columns[e].operations[0].value.toLowerCase(), this)
          //console.log("SOMMA ",columns[e].operations[0].value.toLowerCase());
          sum = formatNumber(columns[e].type, sum)
          sum = thousandsSeparator(sum)
          $('.dataTable tr.partial').find('th').eq(e).empty().html(sum);
        }
      }
    })
  }

  function performOperationOnColumn(colonna) {
    //var idx = $("select").index(colonna);
    var idx = $(colonna).parent().prevAll().length;

    //console.log("PERFORM OPERATION IDX",idx," IDX 2 ",idx2 );
    var result = 0;

    result = operation(colonna.value, mainTable.column(idx).data().toArray())
    //result = (!isNaN(result)) ? formatCurrency(parseFloat(result)) : '';
    //$('tfoot .partial th').eq(idx).empty().html(parseFloat(result).toFixed(2));
    if (colonna.value != 'sumby' || result > 0) {
      result = formatNumber(columns[idx].type, result);
    }

    $('thead .partial th').eq(idx).empty().html(result);
  }

  function oneColumnOp(tr, col) {
    //console.log("ONECOLUMNOP ",tr,col);
    var group = (tr != null) ? tr : $('table tbody tr');
    //console.log("GUPPO DOPO LA CHIAMATA ", group);
    var t = group.first().find("td").length;
    //var c = $('#dataTable tr.ui-selected').length;
    var c = group.length;

    var tmpArray = new Array(t);
    for (i = 0; i < t; i++) {
      tmpArray[i] = new Array(c);
    }
    //console.log("TMP ",tmpArray);

    var op = $("table thead th").eq(col).find("select").val()

    //var idx = $('select').index(col);
    idx = 0;
    group.each(function(i) {
      //console.log("TR", i);
      row = this;
      $(row).find("td").each(function(j) {

        h = $(this).text().split(".").join('');
        h = h.split(",").join('');
        if (columns[j].type == 'FLOAT') {
          h = parseFloat(h) / 100;
        }
        //console.log("riga ", i, " colonna ", j, " valore ", $(this).text().split(".").join(''),"H ",h);
        tmpArray[j][i] = parseFloat(h);
      })

    })
    //console.log("TMP ARRAY ",tmpArray);
    $(tmpArray).each(function(j) {
      //op = $("table thead th").eq(j).find("select").val();
      if (columns[j].operations != undefined) {

        ////console.log("OPX ", columns[j].operations[0].value);
        op = columns[j].operations[0].value.toLowerCase()


        ////console.log("-------OPERAZIONI--------");
        ////console.log("-------------------------");
        //console.log(operation(op, tmpArray[j]), op, tmpArray[j]);
        //res = (!isNaN(operation(op, tmpArray[j],group.index()))) ? operation(op, tmpArray[j],group.index()) : '';
        if (columns[j].operations[0].value != "SUMAVG") {
          res = operation(op, tmpArray[j], group.index());
        }
        //res = parseFloat(operation(op, tmpArray[j])).toFixed(2);
        //console.log("COLONNA ",columns[j].type,res,tmpArray[j]);
        if (columns[j].type == 'INTEGER' || columns[j].type == 'FLOAT') {
          if (op != 'sumby' || res > 0) {
            res = formatNumber(columns[j].type, res);
            res = thousandsSeparator(res)
          }
          $(".dataTable thead .total th").eq(j).empty().html(res);
        }
      }
      //console.log("-------------------------");
    })
    // }
    //console.log("RETURN ",tmpArray[idx]);
    //console.log("operation: ", op);
    //console.log("-------------------------");
  }

  function columnRender(column) {
    var ret = "";
    var tt = '';
    //console.log("ANALIZZZO LA COLONNA",column.type);
    switch (column.type) {
      case 'string':
      case 'STRING':
      case 'TEXT':
      case 'VARCHAR':
      case '':
      case 'WEEK':
        ret = function(data, type, row) {
          return data;
        }
        break;
      case 'NOTE':
        ret = function(data, type, row){
          id=data.split("|");
          msg=id[1].split("-");
           id=id[0];
          //console.log("DATA",type,row);
          return '<a href="#chatModal" role="button" class="btn message message-orange" data-toggle="modal" data-target="#chatModal" data-id="'+id+'" data-reference="'+id+'">'+msg[0]+'</a> | <a tabindex="0" href="#" role="button"><button type="button" class="btn message message-blue" data-toggle="modal" data-target="#chatModal" data-id="'+id+'">'+msg[1]+'</button></a>';
          //return data;
        }
        break;
      case 'MONTH':
        ret = function(data, type, row) {
          // data = data.split("-");
          // data = "20" + data[1] + "-" + data[0] + "-01";
          // return moment(data).format("MM-YY")
          return data;
        }
        break
      case 'YEAR':
        ret = function(data, type, row) {
          return data;
        }
        break;
      case "DATE":
      case 'date':
      case 'day':
      case 'DATA':
        ret = function(data, type, row) {
          if (type === 'display' || type == 'filter') {

            var d = new Date(data * 1000);
            dd = d.getDate() + '-' + (d.getMonth() + 1) + '-' + d.getFullYear();
            //console.log("GOT FILTER!!!",dd);
          }
          return moment(data).format("YY-MM-DD");
        }
        //};

        break;
      case 'INTEGER':
        //console.log("VALORE INTEGER");
        ret = $.fn.dataTable.render.number('.', ',', 0, '');
        break;
      case 'FLOAT':
        //ret = formatCurrency;
        ret = $.fn.dataTable.render.number('.', ',', 2, '');
        break;
      default:
        ret = function(data, type, row) {
          return data;

        }
    }
    return ret
  }

  function operation(op, val, i) {
    i = (i) ? i : 0;
    //console.log("ESEGUO OPERAZIONE ", op);
    switch (op) {
      case 'sum':
        //console.log("-------SOMMA--------");
        s = val.reduce(function(a, b) {
          return a + b;
        }, 0);
        return s;
        break;
      case 'avg':
        //console.log("-------MEDIA--------");
        s = val.reduce(function(a, b) {
          return a + b;
        }, 0)

        return s / val.length;
        break;
      case 'min':
        s = Math.min.apply(null, val);
        return s;
        break;
      case 'max':
        s = Math.max.apply(null, val);
        return s;
        break;
      case 'sumby':
        cc = []
        s = val.reduce(function(a, b, c, d) {
          //console.log("ABC",a,b,c);
          //console.log("COLUMNS ",i,mainTable.cell((c),0).data());
          //console.log();
          cc.push(mainTable.cell((c + i), 0).data());

          return a + b;
        }, 0);
        //console.log("CC ",$.uniqueSort(cc));
        cc = $.uniqueSort(cc);
        if (cc.length > 1) {
          return "---";
        } else {
          return s;
        }

        //console.log("---------------------------");
        //s=parseFloat(s/s.length);

        break;
      case 'sumavg':
        cc = []
        s = val.reduce(function(a, b, c) {
          //console.log("SUM AVG ", a, b, c);
        })
        break
      default:
        return 0; //"operazione non supportata";

    }
  }
  function updateModal(id) {
    $.ajax({
      url: 'http://localhost:3000/messaggi/'+id,
      type: 'GET',
      dataType: 'json'

    })
    .done(function(data) {
      console.log("success",data);

    })
    .fail(function() {
      console.log("error");
    })
    .always(function() {
      console.log("complete");
    });


  }
  function formatNumber(type, number) {
    switch (type) {
      case 'FLOAT':
        return parseFloat(number).toFixed(2)
        break;
      case 'INTEGER':
        return parseInt(number);
        break;
      default:

    }

  }
  $.fn.digits = function() {
    return this.each(function() {
      $(this).text($(this).text().replace(/(d)(?=(ddd)+(?!d))/g, "$1,"));
    })
  }


</script>

</html>
