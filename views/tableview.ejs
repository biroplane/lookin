<!DOCTYPE html>
<html>

<head>

  <script data-pace-options='{ "ajax": false }' src="/js/pace.min.js"></script>

  <meta charset="UTF-8">
  <title></title>

  <link rel="stylesheet" href="/css/_bootstrap.css">

  <!-- <link rel="stylesheet" href="./css/bootstrap-table.min.css"> -->



  <link rel="stylesheet" href="/css/pace.css">
  <link rel="stylesheet" href="/css/datatables.min.css" />
  <link rel="stylesheet" href="/css/jquery-ui.min.css">
  <!-- <link rel="stylesheet" href="./css/jquery-ui.structure.min.css"> -->
  <link rel="stylesheet" href="/css/bootstrap-select.min.css">
  <link rel="stylesheet" href="/css/datatables.min.css">
  <link rel="stylesheet" href="/css/daterangepicker.css">
  <link rel="stylesheet" href="/css/style.css">
  <script>
    // var filters={};
    // const {ipcRenderer}=require('electron')
    // ipcRenderer.send('sendFilter','filtri');
    // ipcRenderer.on('getFilter',(evt, arg)=>{
    //   filters=arg;
    // })
  </script>
  <script>
    //window.nodeRequire = require;
    delete window.require;
    delete window.exports;
    delete window.module;
  </script>

  <script src="/js/jquery-3.1.1.min.js"></script>
  <script src="/js/bootstrap.min.js"></script>
  <script src="/js/datatables.min.js"></script>
  <script src="/js/dataTables.bootstrap.min.js"></script>
  <script src="/js/jquery-ui.min.js"></script>
  <script src="/js/dataTables.buttons.min.js"></script>
  <script src="/js/buttons.html5.min.js"></script>
  <script src="/js/bootstrap-select.min.js"></script>
  <script src="/js/bootstrap-editable.js"></script>
  <script src="/js/jszip.min.js"></script>
  <script src="/js/moment.js"></script>
  <script src="/js/daterangepicker.js"></script>
  <script src="/js/dtplugins.js"></script>
  <script src="/js/filterByText.js"></script>

</head>

<body>


  <div class="container-fluid">


    <!--
┌──────────────────────────────────────┐
│ ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ │
│        ┌──────────────────┐          │
│ ░░░░░░ │      TABLE       │ ░░░░░░░░ │
│        └──────────────────┘          │
│ ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ │
└──────────────────────────────────────┘
-->
    <h2 style="padding-top:-140px" class="maintitle">



</h2>
    <table id="dataTable" class="table display dataTable stripe nowrap" cellspacing="20" width="100%">
      <!-- <thead><tr><th></th></tr></thead>
    <tbody><tr><td></td></tr></tbody>
    <tfoot><tr><th></th></tr></tfoot> -->

    </table>

  </div>

</body>
<script>
  var mainTable;
  var t;
  var partials = new Array();
  var data = {};
  var viewname;

  columnsData = <%- JSON.parse(JSON.stringify(report.data,null,2)) %>;
  //console.log(<%- JSON.parse(JSON.stringify(report.data)) %>);
  columnsData = columnsData[0];
  columns = columnsData.columns;
  viewname = columnsData.nome;
  querystring = <%- JSON.stringify(query,null,2) %>
 //console.log("CARICATO ", columns);
  newcol = [];
  //console.log("LUNGHEZZA K ", columns.length);
  $.each(columns, function(key, val) {
    cname = '';

    switch (val.type) {
      case 'STRING':
      case 'FILTER':
      case 'VARCHAR':
        cname = 'text-left';
        break;
      case 'DATE':
        cname = 'text-center';
        break;
      default:
        cname = 'text-right';
    }
    //console.log("COLONNE K ", key, val,cname);
    newcol.push({
      data: val.nome.toString(),
      title: val.nome.toString().split("_").join(" "),
      type: val.type,
      /*(val.TYPE != '') ? val.TYPE : "string",*/
      render: columnRender(val),
      className: cname
    });
    //newcol.push({"data":v.toString(),type:"text"});
    //console.log("TIPO DATO COLONNA ",newcol[key].type);
  })

  //console.log(" COLONNE ", columns.length, " NEW COL ",newcol);
  data.columns = newcol;

  $().ready(function() {
    // $(window).on('resize', function() {
    //   $('#dataTable').DataTable().columns.adjust().draw();
    // })
    $("footer").slideUp();

    //TITOLO
    currentview = viewname;
    tit = viewname.toString().toLowerCase().split("_");
    stor = ($.inArray('stor', tit) >= 0) ? ' storico' : '';
    //ddate=(datalog==true)?' from <i>'+moment(datalog).format("DD MMM YYYY")+"</i>" :'';
    var qs = '';
    if (querystring != '' && querystring != null && querystring.length > 0) {
      qs += '<h4>FILTERED BY ';
      for (var q in querystring) {
        if (querystring[q] != "" && querystring[q] != '_') {
          qs += q + ' - ' + querystring[q] + " ";
        }
      }
      qs += '</h4>';
    }
    $('.maintitle').html("Displaying: <b>" + tit[2] + stor + "</b> report, Grouped by <b>" + tit[(tit.length - 1)] + "</b><br />" + qs /*+ddate*/ )


    var tablefooter = '';
    partialfooter = '<tr class="partial">';
    totalfooter = '<tr class="total">';
    //tablefooter =totalfooter;
    $(data.columns).each(function(i) {
      partialfooter += "<th></th>";
      totalfooter += "<th></th>";
    });

    partialfooter += "</tr>";
    totalfooter += '</tr>';
    tablefooter = '' + totalfooter + partialfooter + '';

    //console.log("VIEW DA CHIAMARE ",viewname);
    gf = '';
    for (var f in querystring) {
      if (querystring[f] != null && querystring[f] != '') {
        gf += f + '=' + querystring[f] + '&';

      }
    }
    mainTable = $('#dataTable').DataTable({


      //data:'http://localhost:3000/view/'+currentview+'?'+gf,
      columns: data.columns,
      initComplete: function() {
        $(".dataTable thead").first().each(function(i) {
          //console.log("THIS" + $(this));
          //$('<tr class="combos"></tr>').prependTo($(this));
          $('<tr class="bigheader"></tr>').appendTo($(this));

          $(this).find('th').each(function(j) {
            var optstr = '<th>';
            if (columns[j].operations != null) {
              optstr += '<select class="operation">';
              //console.log("OPERAZIONI FATTIBILI",columns[j].operations);
              $(columns[j].operations).each(function(n) {
                //def=(this.default==1)?' selected':'';
                optstr += '<option value="' + this.value.toLowerCase() + '">' + this.nome + '</option>';
              })
              optstr += '</select>';

            }
            optstr += '</th>';
            //$(optstr).appendTo($('.combos'));
            $('<th><input type="text" class="columnfilter"/></th>').appendTo($('.bigheader'));

          })
          $(tablefooter).appendTo($(this));



          //$('.selectpicker').selectpicker("refresh");

          //console.log("INIT COMPLETE");
        })
        this.api().columns().every(function() {
          idx = this.index();
          //if (columns[this.index()].type != "INTEGER" && columns[this.index()].type != "FLOAT") {
          if(columns[this.index()].type == "FILTER" || columns[this.index()].type == "DATE" || columns[this.index()].type == "WEEK" || columns[this.index()].type == "MONTH" || columns[this.index()].type == "YEAR" ){

            var column = this;
           //console.log("SELECT BOX IN HEADER", $('.partial th').eq(idx));
            name = columns[idx].nome;
            id = name;
            var select = $('<select class="selectpicker unique show-tick" multiple title="' + name +
                '"  data-actions-box="false" data-live-search="true" name="' + name + '" id="' + name + '"><option data-hidden="true"></option></select>')
              .appendTo($('.partial th').eq(idx).empty())
              .on('change', function(e) {
                e.preventDefault();
               //console.log("CERCA ", $(this).val());
                var sv = $(this).val()
                val = '';
                for (var s in sv) {

                  val += $.fn.dataTable.util.escapeRegex(sv[s]) + "|";

                }
                val = val.substring(0, val.length - 1)
               //console.log("CERCO ", val);
                // var val = $.fn.dataTable.util.escapeRegex(
                //   $(this).val()
                // );
                //
                column
                  .search(val, true, false)
                  .draw();
              });
            if (columns[idx].type == "DATE") {
              column.data().unique().sort().each(function(d, j) {
                d = moment(d).format("YY-MM-DD");
                select.append('<option value="' + d + '">' + d + '</option>')
              });
            } else {
              column.data().unique().sort().each(function(d, j) {
                select.append('<option value="' + d + '">' + d + '</option>')
              });
            }

          }
        });
        $('.selectpicker').selectpicker("refresh")
        // var footer = $(this).append('<tfoot><tr class="partial"></tr><tr class="total"></tr></tfoot>');
        // this.api().columns().every(function() {
        //   var column = this;
        //   $(footer).find('.partial').append('<th></th>');
        //   $(footer).find('.total').append('<th></th>');
        // });



        //HEADER CALLBACK
        var api = this.api();
        //console.log("HEADER CALLBACK ");
        api.columns({
          filter: 'applied'
        }).every(function() {
          ind = this.index();
          if (columns[ind].operations != null) {
            //console.log("INDEX ",this.index());
            for (var o in columns[ind].operations) {
              if (columns[ind].operations[o].default == 1) {
                op = columns[ind].operations[o].value.toLowerCase();
              }
            }

            //var sum = operation(op, this.data())
           //console.log("OPERAZIONE VALCHIRIA", sum, op);
            //console.log("ROW "+row+" - SOMMA "+sum); //alert(sum);
            //sum = (isNaN(sum)) ? '' : sum;
            //$('tfoot .total th').html(sum);
            //console.log("THIS ",this.nodes().parentNode,this.index());
            // if (op != 'sumby' || sum>0) {
            //   sum = (isNaN(sum)) ? '' : formatCurrency(parseFloat(sum));
            //   //console.log("LOG ",this.index(), columns[this.index()].type);
            //   //if(columns[this.index()].type == 'FLOAT' || columns[this.index()].type == 'INTEGER'){
            //   sum = formatNumber(columns[this.index()].type, sum)
            //   sum = thousandsSeparator(sum)
            // }
            // $('.dataTable tr.partial').find('th').eq(this.index()).empty().html(sum)
            //}
          }

        });
        //oneColumnOp(null, -1)
        $('#dataTable').DataTable().columns.adjust().draw()
      },

      headerCallback: function(row, data, start, end, display) {

        //console.log("ROW ",api.column().eq(this.index()));
      },
      // footerCallback:function () {
      //   $('#dataTable').DataTable().columns.adjust().draw()
      // },
      drawCallback: function() {
        //console.log("DRAW! ");
      },
      // columnDefs: [{
      //   "visible": true,
      //   "targets": 0
      //   //"visible":false, "targets":2
      // }],
      //  ajax: {
      //    url:'http://localhost:3000/view/'+currentview+'?'+gf
      //   //  ,type: 'GET'
      //  },

      //dataSrc:data[0],
      // renderer: "bootstrap",
      aaSorting: [],
      deferRender: true,
      serverSide: false,
      processing: true,
      sortable: false,
      stateSave: false,
      select: false,
      paging: true,
      displayLength: 25,
      scrollX: false,
      // scrollY:800,

      fixedHeader: false,
      // sScrollX:"20%",
      // sScrollXInner:"99.9%",
      // bScrollCollapse: false,
      scrollCollapse: false,

      //buttons: true,
      ajax: {
        type:'GET',
        url:'http://localhost:3000/view/'+currentview + '?' + gf,
        dataType:'json',

      },

      autoWidth: false,
      buttons: [
          'copyHtml5', 'excelHtml5', 'csvHtml5', 'pdfHtml5', 'print' , 'colvis'
        ]
        //,"dom": 'ZBlifrtpB'
        ,
      "dom": "<'row'<'col-sm-12'B>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'Bl><'col-sm-7'p>>",
      "lengthMenu": [
        [10, 25, 50],
        [10, 25, 50]
      ],
      "language": {
        "decimal": ",",
        "thousands": ".",
        "zeroRecords": "No records found, sorry"
      },
      "stripeClasses": ['oddo', 'eveno'],
      rowCallback: function(row, rdata, index) {
        //console.log("ROW: ", row, " DATA: ", rdata, " INDEX: ", index)
        $(row).find("td").each(function(a) {
          if (parseFloat($(this).text()) > 0) {
            //$('td:eq(' + a + ')', row).addClass('pos');
          } else if (parseFloat($(this).text()) < 0) {
            $('td:eq(' + a + ')', row).addClass('neg');
          }
        })
      }
    });
    // END DATATATABLE
    $('#dataTable').DataTable().columns.adjust().draw();

    $('table').on('change', 'select.operation', function() {
      //performOperationOnColumn(this);
      var group = ($('table tbody tr').hasClass('ui-selected')) ? $('table tr.ui-selected') : null;
      //console.log("GUPOOOOOOO", group);
      oneColumnOp(group, $(this).parent().prevAll().length,group.index())
      //console.log(" GLOBAL INDEX ",$(this).parent().prevAll().length);
    });
    // footer = '<tfoot><tr>';
    // $(data.columns).each(function(i) {
    //   footer += "<th></th>";
    // })
    // footer += '</tr></tfoot>';
    // $("#dataTable").append(footer);
    //new $.fn.dataTable.FixedHeader( mainTable );


    // $(".dataTable thead").first().each(function(i) {
    //   //console.log("THIS" + $(this));
    //   $('<tr class="combos"></tr>').prependTo($(this));
    //   $('<tr class="bigheader"></tr>').appendTo($(this));
    //
    //   $(this).find('th').each(function(i) {
    //     $('<th><select class="selectpicker operation"><option value="avg">AVG</option><option value="sum" selected>SUM</option><option value="min" >MIN</option><option value="max" >MAX</option></select></th>').appendTo($('.combos'));
    //     $('<th><input type="text" class="columnfilter"/></th>').appendTo($('.bigheader'));
    //
    //   })
    //   $(tablefooter).appendTo($(this));
    // })

    $(".dataTable thead").on('keyup search input paste cut', 'input', function(e) {
     //console.log("CERCAAAAAAAAA", $(this).parent().index(), "VAL ", $(this).val());
      $('#dataTable').DataTable().column($(this).parent().index() + ':visible').search($(this).val()).draw();


    });
    $('.dataTable').on('shown.bs.select','select.selectpicker',function (e) {
      var idx = $(this).parent().parent().index()
      var txtfld=$('.dataTable thead th input.columnfilter').eq(idx).val()
     //console.log("ECCO IL DROPDOWN",txtfld,idx);

      $(this).parent().find('.bs-searchbox input[type=text]').val(txtfld)
      $(this).selectpicker('refresh')

      //$(this).parent().parent().selectpicker("refresh")
    })
    $('#dataTable').on('column-visibility.dt', function(e, settings, column, state) {
      e.preventDefault();
      //console.log('Column ' + column + ' has changed to ' + (state ? 'visible' : 'hidden'), $("#dataTable thead th").eq(column));
      //$("#dataTable thead tr:nth-child(2) th").eq(column).toggle(state)
      //state=!state;
      $('.dataTable thead tr.partial th').eq(column).toggle(state);
      $('.dataTable thead tr.total th').eq(column).toggle(state);
      // $('.dataTable thead tr.combos th').eq(column).toggle(state);
      // $('.dataTable thead tr:nth-child(2) th').eq(column).toggle(state);
      $('.dataTable thead tr.bigheader th').eq(column).toggle(state);
    });
    $("#dataTable").addClass("selezionabile");
    var prev = -1;
    $(".selezionabile>tbody").selectable({
      filter: "tr:not(.group)",
      //cancel:"td td:first-child",

      selecting: function(e, ui) {
        var curr = $(ui.selecting.tagName, e.target).index(ui.selecting);
        if (e.shiftKey && prev > -1) {
          //console.log(prev, curr, Math.min(prev,curr));
          $(ui.selecting.tagName, e.target).slice(Math.min(prev, curr), 1 + Math.max(prev, curr)).addClass('ui-selected')
          prev = -1;
        } else {
          prev = curr;
        }
        //console.log("CAMBIO SELEZIONE SU SELECTING");
      },
      selected: function(event, ui) {
        //console.log("EVENT ", event," UI ",ui);
        //$('tr.ui-selected').first().clone().appendTo('.content');
        //$("footer").slideDown('slow');
        //$('.content td').first().html("EVENT "+ event+" UI "+ui)
        //console.log("CAMBIO SELEZIONE SU SELECTED");

      },
      start: function(event, ui) {

        $(event.target).toggleClass('ui-selected');
        //$(".content").empty();
        //$('table tbody tr').first().clone().appendTo('.content');

      },
      stop: function(event, ui) {

        oneColumnOp($('#dataTable tr.ui-selected'), -1)
       //console.log("POSSO DARTI QUESTO",this);
        sumSameColumnValues(this)

      }

    });
    //});
    // $('#dataTable').DataTable({
    //   data:data.data,
    //   columns:data.columns,
    //   "bSort":false
    // })
    //})

  });

  function stopPropagation(evt) {
    if (evt.stopPropagation !== undefined) {
      evt.stopPropagation();
    } else {
      evt.cancelBubble = true;
    }
  }

  function formatCurrency(total, type, row) {
    var neg = false;
    if (total < 0) {
      neg = true;
      total = Math.abs(total);
    }
    //console.log("FORMAT CURRENCY", parseFloat(total, 10).toFixed(2).replace(/(d)(?=(d{3})+.)/g, "$1.").toString());
    return (neg ? "-" : '') + parseFloat(total, 10).toString().replace(/(d)(?=(d{3})+.)/g, "$1.").toString();
  }

  function thousandsSeparator(x) {
    //
    x = x.toString().split('.').join(',');
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");

  }

  function sumSameColumnValues(righe) {

    var selected = $(righe).find('.ui-selected')

    var first=selected.first().find('td').first().text();


    operationsArray=new Array();
    //trArray=new Array($(tr).children('td').length);
    $(righe).find('tr').each(function(i, tr) {
      $(tr).find('td').each(function(j, td) {
        if($(tr).find('td').eq(0).text()==first){

            //console.log("CALCOLO ",j," I ",i,$(this).text());
            if(!operationsArray[j]){
              operationsArray[j]=[]
            }
            if(columns[j].type=='INTEGER' || columns[j].type=='FLOAT'){
              h = $(td).text().split(".").join('');
              h = h.split(",").join('');
              if (columns[j].type == 'FLOAT') {
                h = parseFloat(h) / 100;
              }
              if (columns[j].type == 'INTEGER') {
                h = parseInt(h);
              }

              operationsArray[j][i]=h;
            }
        }

      });
      //operationsArray[j]=[]
    });
   //console.log("ECCO L'ARRAY DEFINITIVO ",operationsArray);
    $(operationsArray).each(function (e) {

      if(columns[e].type=='INTEGER' || columns[e].type=='FLOAT'){
        var sum = operation('sumby',this)
       //console.log("SOMMA ",sum);
        sum = formatNumber(columns[e].type,sum)
        sum=thousandsSeparator(sum)
        $('.dataTable tr.partial').find('th').eq(e).empty().html(sum)
      }
    })
  }
  function performOperationOnColumn(colonna) {
    //var idx = $("select").index(colonna);
    var idx = $(colonna).parent().prevAll().length;

    //console.log("PERFORM OPERATION IDX",idx," IDX 2 ",idx2 );
    var result = 0;

    result = operation(colonna.value, mainTable.column(idx).data().toArray())
    //result = (!isNaN(result)) ? formatCurrency(parseFloat(result)) : '';
    //$('tfoot .partial th').eq(idx).empty().html(parseFloat(result).toFixed(2));
    if(colonna.value!='sumby' || result>0){
      result = formatNumber(columns[idx].type, result);
    }

    $('thead .partial th').eq(idx).empty().html(result);
  }

  function oneColumnOp(tr, col) {
    //console.log("ONECOLUMNOP ",tr,col);
    var group = (tr != null) ? tr : $('table tbody tr');
    //console.log("GUPPO DOPO LA CHIAMATA ", group);
    var t = group.first().find("td").length;
    //var c = $('#dataTable tr.ui-selected').length;
    var c = group.length;

    var tmpArray = new Array(t);
    for (i = 0; i < t; i++) {
      tmpArray[i] = new Array(c);
    }
    //console.log("TMP ",tmpArray);
    var op = $("table thead th").eq(col).find("select").val()
    //var idx = $('select').index(col);
    idx=0;
    group.each(function(i) {
      //console.log("TR", i);
      row = this;
      $(row).find("td").each(function(j) {

        h = $(this).text().split(".").join('');
        h = h.split(",").join('');
        if (columns[j].type == 'FLOAT') {
          h = parseFloat(h) / 100;
        }
        //console.log("riga ", i, " colonna ", j, " valore ", $(this).text().split(".").join(''),"H ",h);
        tmpArray[j][i] = parseFloat(h);
      })

    })
    //console.log("TMP ARRAY ",tmpArray);
    $(tmpArray).each(function(j) {
      op = $("table thead th").eq(j).find("select").val();
      //console.log("-------OPERAZIONI--------");
      //console.log("-------------------------");
      //console.log(operation(op, tmpArray[j]), op, tmpArray[j]);
      //res = (!isNaN(operation(op, tmpArray[j],group.index()))) ? operation(op, tmpArray[j],group.index()) : '';
      res = operation(op, tmpArray[j],group.index());
      //res = parseFloat(operation(op, tmpArray[j])).toFixed(2);
      //console.log("COLONNA ",columns[j].type,res,tmpArray[j]);
      if (columns[j].type == 'INTEGER' || columns[j].type == 'FLOAT') {
        if(op!='sumby' || res>0){
        res = formatNumber(columns[j].type, res);
        res = thousandsSeparator(res)
        }
        $(".dataTable thead .total th").eq(j).empty().html(res);
      }
      //console.log("-------------------------");
    })
    // }
    //console.log("RETURN ",tmpArray[idx]);
    //console.log("operation: ", op);
    //console.log("-------------------------");
  }

  function columnRender(column) {
    var ret = "";
    var tt = '';
    //console.log("ANALIZZZO LA COLONNA",column.type);
    switch (column.type) {
      case 'string':
      case 'VARCHAR':
      case '':
      case 'WEEK':
        ret = function(data, type, row) {
          return data;
        }
        break;
      case 'MONTH':
        ret = function(data, type, row) {
          // data = data.split("-");
          // data = "20" + data[1] + "-" + data[0] + "-01";
          // return moment(data).format("MM-YY")
          return data;
        }
        break
      case 'YEAR':
        ret = function(data, type, row) {
          return data;
        }
        break;
      case "DATE":
      case 'date':
      case 'day':
      case 'DATA':
        ret = function(data, type, row) {
          if (type === 'display' || type == 'filter') {

            var d = new Date(data * 1000);
            dd = d.getDate() + '-' + (d.getMonth() + 1) + '-' + d.getFullYear();
            //console.log("GOT FILTER!!!",dd);
          }
          return "<span class='weeknumber'>" + moment(data).format("(W)") + "</span> " + moment(data).format("YY-MM-DD");
        }
        //};

        break;
      case 'INTEGER':
        //console.log("VALORE INTEGER");
        ret = $.fn.dataTable.render.number('.', ',', 0, '');
        break;
      case 'FLOAT':
        //ret = formatCurrency;
        ret = $.fn.dataTable.render.number('.', ',', 2, '');
        break;
      default:
        ret = function(data, type, row) {
          return data;

        }
    }
    return ret
  }

  function operation(op, val, i) {
    i=(i)?i:0;
    //console.log("ESEGUO OPERAZIONE ", op);
    switch (op) {
      case 'sum':
        //console.log("-------SOMMA--------");
        s = val.reduce(function(a, b) {
          return a + b;
        }, 0);
        return s;
        break;
      case 'avg':
        //console.log("-------MEDIA--------");
        s = val.reduce(function(a, b) {
          return a + b;
        }, 0)

        return s / val.length;
        break;
      case 'min':
        s = Math.min.apply(null, val);
        return s;
        break;
      case 'max':
        s = Math.max.apply(null, val);
        return s;
        break;
      case 'sumby':
        cc = []
        s = val.reduce(function(a, b, c, d) {
          //console.log("COLUMNS ",mainTable.cell(c,0).data());
          cc.push(mainTable.cell((c+i),0).data());

          return a + b;
        }, 0);
        //console.log("CC ",$.uniqueSort(cc));
        cc=$.uniqueSort(cc);
        if(cc.length>1){
          return "---";
        }else{
          return s;
        }

       //console.log("---------------------------");
        //s=parseFloat(s/s.length);

        break;
      default:
        return 0;//"operazione non supportata";

    }
  }

  function formatNumber(type, number) {
    switch (type) {
      case 'FLOAT':
        return parseFloat(number).toFixed(2)
        break;
      case 'INTEGER':
        return parseInt(number);
        break;
      default:

    }

  }
  $.fn.digits = function() {
    return this.each(function() {
      $(this).text($(this).text().replace(/(d)(?=(ddd)+(?!d))/g, "$1,"));
    })
  }
</script>

</html>
